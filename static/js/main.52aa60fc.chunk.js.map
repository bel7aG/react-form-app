{"version":3,"sources":["Api/unsplash.js","components/App/index.js","components/App/App.js","components/SearchBar/index.js","components/SearchBar/SearchBar.js","components/ImageList/ImageList.js","components/ImageList/index.js","components/Image/index.js","components/Image/Image.js","components/Spinner/index.js","components/Spinner/Spinner.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","App","state","images","componentDidMount","console","log","Object","assertThisInitialized","_this","handleFormSubmit","_callee","term","response","regenerator_default","a","wrap","_context","prev","next","unsplash","get","params","query","sent","setState","data","results","stop","this","react_default","createElement","className","components_SearchBar","onSubmit","length","components_ImageList","Component","SearchBar","handleInput","event","target","value","preventDefault","props","type","placeholder","onChange","i","ImageList","_ref","map","image","components_Image","concat","key","id","Image","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderContent","_this$props$image","urls","description","isLoaded","ref","imageRef","src","regular","alt","components_Spinner","style","height","current","clientHeight","spans","React","createRef","_this2","addEventListener","Spinner","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52aa60fc.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.unsplash.com',\r\n  headers: {\r\n    Authorization: 'Client-ID 3f9a2cacd0cb48e872e4d9e5bfa722c5a0e109bf79d968d308a258ef25061462'\r\n  }\r\n})","import App from './App'\r\n\r\nexport default App\r\n","import React, { Component } from 'react'\r\nimport unsplash from 'Api/unsplash'\r\nimport { SearchBar, ImageList } from '../'\r\n\r\nexport default class App extends Component {\r\n  \r\n  state = {\r\n    images: []\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n    console.log(this)\r\n  }\r\n  \r\n  handleFormSubmit = async (term) => {\r\n    const response = await unsplash.get('/search/photos', {\r\n      params: {\r\n        query: term\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      images: response.data.results\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <SearchBar onSubmit={this.handleFormSubmit} />\r\n        {this.state.images.length === 0 ? <div className=\"empty\"><h1>Hi</h1></div> : <ImageList images={this.state.images} />}\r\n      </div>\r\n    )\r\n  }\r\n}","import SearchBar from './SearchBar'\r\n\r\nexport default SearchBar\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SearchBar extends Component {\r\n  state = {\r\n    term: ''\r\n  }\r\n  \r\n  handleInput = (event) => {\r\n    this.setState({\r\n      term: event.target.value\r\n    })\r\n  }\r\n  \r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault()\r\n    this.props.onSubmit(this.state.term);\r\n    this.setState({\r\n      term: ''\r\n    })\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar\">\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar-input flex-center\"\r\n            placeholder=\"search\"\r\n            value={this.state.term}\r\n            onChange={this.handleInput}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Image } from '../'\r\n\r\nlet i = 1\r\nconst ImageList = ({ images }) => (\r\n  <div className=\"image-list\">\r\n    <ul className=\"image-list-items\">\r\n      {images.map(image =>\r\n        <Image\r\n          className={`image-box image-box-${i++}`}\r\n          key={image.id}\r\n          image={image}\r\n        />\r\n      )}\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nexport default ImageList","import ImageList from './ImageList'\r\n\r\nexport default ImageList","import Image from './Image'\r\n\r\nexport default Image","import React, {Component} from 'react'\r\nimport { Spinner } from '../'\r\n\r\nexport default class Image extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isLoaded: true,\r\n      spans: 0\r\n    }\r\n    \r\n    this.imageRef = React.createRef()\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.setState({\r\n      isLoaded: false\r\n    })\r\n  \r\n    this.imageRef.current.addEventListener('load', () => {\r\n      this.setState({\r\n        isLoaded: true\r\n      })\r\n    })\r\n  }\r\n\r\n  renderContent = () => {\r\n    const { urls, description } = this.props.image\r\n    const className = this.props.className\r\n    if (this.state.isLoaded) {\r\n      return (\r\n        <li className={className}>\r\n          <img ref={this.imageRef} src={urls.regular} alt={description} />\r\n        </li>\r\n      )\r\n    }\r\n\r\n    return <Spinner style={{ height: this.imageRef.current.clientHeight }}/>\r\n  }\r\n  \r\n  render() {\r\n    return this.renderContent()\r\n  }\r\n  \r\n}    \r\n\r\n\r\n","import Spinner from './Spinner'\r\n\r\nexport default Spinner","import React from 'react'\r\n\r\nconst Spinner = () => (\r\n  <div className=\"spinner\">\r\n    <h1 className=\"spinner-circle\">loading</h1>\r\n  </div>\r\n)\r\n\r\nexport default Spinner","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components';\nimport \"./styles/index.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}